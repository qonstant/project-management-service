// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title, description, priority, status, assignee_id, project_id, creation_date, completion_date
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date
`

type CreateTaskParams struct {
	Title          string       `json:"title"`
	Description    string       `json:"description"`
	Priority       TaskPriority `json:"priority"`
	Status         TaskStatus   `json:"status"`
	AssigneeID     int64        `json:"assignee_id"`
	ProjectID      int64        `json:"project_id"`
	CreationDate   time.Time    `json:"creation_date"`
	CompletionDate sql.NullTime `json:"completion_date"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.Status,
		arg.AssigneeID,
		arg.ProjectID,
		arg.CreationDate,
		arg.CompletionDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Status,
		&i.AssigneeID,
		&i.ProjectID,
		&i.CreationDate,
		&i.CompletionDate,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Status,
		&i.AssigneeID,
		&i.ProjectID,
		&i.CreationDate,
		&i.CompletionDate,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
ORDER BY creation_date ASC
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Status,
			&i.AssigneeID,
			&i.ProjectID,
			&i.CreationDate,
			&i.CompletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTasksByAssignee = `-- name: SearchTasksByAssignee :many
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
WHERE assignee_id = $1
ORDER BY creation_date ASC
`

func (q *Queries) SearchTasksByAssignee(ctx context.Context, assigneeID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasksByAssignee, assigneeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Status,
			&i.AssigneeID,
			&i.ProjectID,
			&i.CreationDate,
			&i.CompletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTasksByPriority = `-- name: SearchTasksByPriority :many
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
WHERE priority = $1
ORDER BY creation_date ASC
`

func (q *Queries) SearchTasksByPriority(ctx context.Context, priority TaskPriority) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasksByPriority, priority)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Status,
			&i.AssigneeID,
			&i.ProjectID,
			&i.CreationDate,
			&i.CompletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTasksByProject = `-- name: SearchTasksByProject :many
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
WHERE project_id = $1
ORDER BY creation_date ASC
`

func (q *Queries) SearchTasksByProject(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasksByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Status,
			&i.AssigneeID,
			&i.ProjectID,
			&i.CreationDate,
			&i.CompletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTasksByStatus = `-- name: SearchTasksByStatus :many
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
WHERE status = $1
ORDER BY creation_date ASC
`

func (q *Queries) SearchTasksByStatus(ctx context.Context, status TaskStatus) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasksByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Status,
			&i.AssigneeID,
			&i.ProjectID,
			&i.CreationDate,
			&i.CompletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTasksByTitle = `-- name: SearchTasksByTitle :many
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
WHERE title ILIKE '%' || $1 || '%'
ORDER BY creation_date ASC
`

func (q *Queries) SearchTasksByTitle(ctx context.Context, dollar_1 sql.NullString) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasksByTitle, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Status,
			&i.AssigneeID,
			&i.ProjectID,
			&i.CreationDate,
			&i.CompletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET 
    title = $2,
    description = $3,
    priority = $4,
    status = $5,
    assignee_id = $6,
    project_id = $7,
    creation_date = $8,
    completion_date = $9
WHERE id = $1
RETURNING id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date
`

type UpdateTaskParams struct {
	ID             int64        `json:"id"`
	Title          string       `json:"title"`
	Description    string       `json:"description"`
	Priority       TaskPriority `json:"priority"`
	Status         TaskStatus   `json:"status"`
	AssigneeID     int64        `json:"assignee_id"`
	ProjectID      int64        `json:"project_id"`
	CreationDate   time.Time    `json:"creation_date"`
	CompletionDate sql.NullTime `json:"completion_date"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.Status,
		arg.AssigneeID,
		arg.ProjectID,
		arg.CreationDate,
		arg.CompletionDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Status,
		&i.AssigneeID,
		&i.ProjectID,
		&i.CreationDate,
		&i.CompletionDate,
	)
	return i, err
}
