// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: project.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    name, description, start_date, end_date, manager_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, description, start_date, end_date, manager_id
`

type CreateProjectParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
	ManagerID   int64     `json:"manager_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.ManagerID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.ManagerID,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, description, start_date, end_date, manager_id FROM projects
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.ManagerID,
	)
	return i, err
}

const getProjectTasks = `-- name: GetProjectTasks :many
SELECT id, title, description, priority, status, assignee_id, project_id, creation_date, completion_date FROM tasks
WHERE project_id = $1
ORDER BY creation_date ASC
`

func (q *Queries) GetProjectTasks(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Status,
			&i.AssigneeID,
			&i.ProjectID,
			&i.CreationDate,
			&i.CompletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT id, name, description, start_date, end_date, manager_id FROM projects
ORDER BY start_date ASC
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.ManagerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProjectsByManager = `-- name: SearchProjectsByManager :many
SELECT id, name, description, start_date, end_date, manager_id FROM projects
WHERE manager_id = $1
ORDER BY start_date ASC
`

func (q *Queries) SearchProjectsByManager(ctx context.Context, managerID int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, searchProjectsByManager, managerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.ManagerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProjectsByTitle = `-- name: SearchProjectsByTitle :many
SELECT id, name, description, start_date, end_date, manager_id FROM projects
WHERE name ILIKE '%' || $1 || '%'
ORDER BY start_date ASC
`

func (q *Queries) SearchProjectsByTitle(ctx context.Context, dollar_1 sql.NullString) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, searchProjectsByTitle, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.ManagerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET 
    name = $2,
    description = $3,
    start_date = $4,
    end_date = $5,
    manager_id = $6
WHERE id = $1
RETURNING id, name, description, start_date, end_date, manager_id
`

type UpdateProjectParams struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
	ManagerID   int64     `json:"manager_id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.ManagerID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.ManagerID,
	)
	return i, err
}
